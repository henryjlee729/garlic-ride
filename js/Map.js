var saveString = "";
var mapEdges = "";
var nodeIndex;
var rides = [];
var bestRide;

let map;
let directionsService;
let directionsRenderers = [];
const apiKey = 'insertAPIKeyHere';

var rideNo = 0;

function showRides () {
  rides[rideNo].showRoute();
  document.getElementById("Duration").innerHTML = rides[rideNo].route.bestDist + " seconds";
  rideNo++;
}

// Some coords just to test the route api

// FengCha will be the default location for now. Still need to figure out how to get current location to work as a default.
const fengChaLatLng = {
  lat: 40.423166,
  lng: -86.928833,
};

const harrisonLatLng = {
  lat: 40.424542,
  lng: -86.924404,
};

const pmuLatLng = {
  lat: 40.424546,
  lng: -86.9156302,
};


var firstCoord;
var secondCoord;
var flip = 0;
// Initialize Google Maps

async function initMap() {
  map = new google.maps.Map(document.getElementById('gmp-map'), {
    zoom: 4,
    center: fengChaLatLng,
    fullscreenControl: false,
    zoomControl: true,
    streetViewControl: false,
  });

  directionsService = new google.maps.DirectionsService();

  // We can have 5 (arbitrary) routes on display at the same time
  for (let i = 0; i < 20; i++) {
    const directionsRenderer = new google.maps.DirectionsRenderer();
    directionsRenderer.setMap(map);
    directionsRenderers.push(directionsRenderer);
  }

  map.setZoom(15);

  var firstNodeIndex;

  map.addListener('click', async (mapsMouseEvent) => {
    let mouseCoords = mapsMouseEvent.latLng.toJSON();
    var bestDist = Infinity;
    var bestIndex;
    for (var i = 0; i < nodes.length; i++) {
      var dist = nodes[i].distFrom([mouseCoords.lat,mouseCoords.lng]);
      if (dist < bestDist) {
        bestDist = dist;
        bestIndex = i;
      }
    }
    console.log(bestIndex)
    if (nodeIndex != null) {
      var eta = await timeDist(nodes[bestIndex], nodes[nodeIndex]);
      saveString += '[' + bestIndex + ',' + nodeIndex + ',' + eta.duration + '],'
      var bestDiff = Infinity;
      rides.forEach(ride => {
        var diff = ride.testPassenger(nodes[bestIndex],nodes[nodeIndex])
        console.log(diff)
        if  (diff < bestDiff) {
          bestDiff = diff;
          bestRide = ride;
        }
      });
      new google.maps.Marker({
        position: {lat: nodes[bestIndex].location[0],lng:nodes[bestIndex].location[1]},
        map,
        title: 'Dest',
      });
      bestRide.addPassenger(nodes[bestIndex],nodes[nodeIndex]);
      bestRide.showRoute();
      alert("New ride started! The total time of completion will be " + bestRide.route.bestDist + " seconds");
      nodeIndex = null;
    
    } else {
      nodeIndex = bestIndex;
      new google.maps.Marker({
        position: {lat: nodes[bestIndex].location[0],lng:nodes[bestIndex].location[1]},
        map,
        title: 'Origin',
      });
    }
    
    document.getElementById(
      'coords'
    ).innerHTML = `lat: ${mouseCoords.lat} lng: ${mouseCoords.lng}`;
	
	if (flip == 0) {
		firstCoord = {x:mouseCoords.lat,y:mouseCoords.lng}
		flip = 1;
	} else {
		secondCoord = {x:mouseCoords.lat,y:mouseCoords.lng}
		flip = 0;
		createNewRoute()
	}
  });

  new google.maps.Marker({
    position: fengChaLatLng,
    map,
    title: 'Current',
  });
}

class forumRoute {
	constructor(start,end) {
		this.start = start
		this.end = end
	}
}

//reset the route storage on refresh (for now at least)
localStorage.setItem("routeStorage",[])

// save routes in local data to be shown later
function createNewRoute() {
	//var routeStorage = localStorage.getItem("routeStorage")
	//if (routeStorage == null) {routeStorage = []}
	
	
	//routeStorage[routeStorage.length] = new forumRoute(firstCoord,secondCoord)
	//calculateAndDisplayRoute(firstCoord.x,firstCoord.y,secondCoord.x,secondCoord.y,2)
	
	//localStorage.setItem("routeStorage",routeStorage)
}

function requestNewForumPost() {
	localStorage.setItem("triggerForumInit",1)
	
	  localStorage.setItem("requestRouteStart",[bestRide.route.origin.location[0],bestRide.route.origin.location[1]])
	  localStorage.setItem("requestRouteFinish",[bestRide.route.destination.location[0],bestRide.route.destination.location[1]])
	  console.log(localStorage.getItem("requestRouteFinish"))
	
	  window.location.href = "forum.html";
}


function calculateAndDisplayRoute(
  startLat,
  startLng,
  endLat,
  endLng,
  rendererIndex
) {
  const startLatLng = { lat: startLat, lng: startLng };
  const endLatLng = { lat: endLat, lng: endLng };

  const request = {
    origin: startLatLng,
    destination: endLatLng,
    travelMode: 'DRIVING', // You can use other modes like 'WALKING', 'BICYCLING', etc.
  };

  directionsService.route(request, (result, status) => {
    if (status === 'OK') {
      directionsRenderers[rendererIndex].setDirections(result);
    } else {
      console.error('Directions request failed due to ' + status);
    }
  });
}

// Call calculateAndDisplayRoute when needed, e.g., after adding your second marker

async function getETA(originCoords, destinationCoords) {
  const origin = `${originCoords.lat},${originCoords.lng}`;
  const destination = `${destinationCoords.lat},${destinationCoords.lng}`;

  // We don't have back end right now, so we have to workaround CORS in the front end
  const corsProxyUrl = 'https://corsproxy.io/?';
  const apiUrl = `https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=${origin}&destinations=${destination}&key=${apiKey}`;
  const url = corsProxyUrl + apiUrl;

  try {
    const response = await fetch(url, { mode: 'cors' });
    const data = await response.json();

    if (data.status === 'OK') {
      // distance in meters
      // duration in seconds
      const distance = data.rows[0].elements[0].distance.value;
      const duration = data.rows[0].elements[0].duration.value;

      // console.log(`Distance: ${distance}`);
      // console.log(`Duration: ${duration}`);

      // document.getElementById('distance').innerHTML = distance;
      // document.getElementById('duration').innerHTML = duration;

      return { distance, duration };
    } else {
      if(saveString.length == 0)
        location.reload();
      console.error('Error:', data.status);
    }
  } catch (error) {
    if(saveString.length == 0)
      location.reload();
    console.error('Error:', error);
  }
}

//Get the current location

async function getcurrentLatLng() {
  const successCallback = (position) => {
    console.log(position);

    let currLatLng = {
      lat: position.coords.latitude,
      lng: position.coords.longitude,
    };
    console.log('Lat: ' + currLatLng.lat);
    console.log('Long: ' + currLatLng.lng);

    new google.maps.Marker({
      position: currLatLng,
      map,
      title: 'My location',
    });

    let currentLocation = new google.maps.LatLng(
      position.coords.latitude,
      position.coords.longitude
    );
    map.setCenter(currentLocation);
    map.setZoom(12);

    // I'm still trying to figure out how to decouple these calls below from this function. But for now this works for demonstration purpose.

    calculateAndDisplayRoute(
      fengChaLatLng.lat,
      fengChaLatLng.lng,
      currLatLng.lat,
      currLatLng.lng,
      0
    );

    calculateAndDisplayRoute(
      harrisonLatLng.lat,
      harrisonLatLng.lng,
      pmuLatLng.lat,
      pmuLatLng.lng,
      1
    );
	
	var routeStorage = localStorage.getItem("routeStorage")
	console.log("mmm")
	console.log(routeStorage)
	if (routeStorage) {
		for (var i = 0; i < routeStorage.length; i++) {
			
			
			calculateAndDisplayRoute(routeStorage[i],routeStorage[i+1],routeStorage[i+2],routeStorage[i+3],i+1)
			
			console.log(routeStorage[i])
		}
	}
  };
  const errorCallback = (error) => {
    console.log(error);
  };
  return navigator.geolocation.getCurrentPosition(
    successCallback,
    errorCallback
  );
}

getcurrentLatLng();

// To use the getETA function:
async function testGetETA() {
  const originCoords = { lat: 40.7128, lng: -74.006 }; // Replace with actual coordinates
  const destinationCoords = { lat: 34.0522, lng: -118.2437 }; // Replace with actual coordinates
  let testETA = await getETA(originCoords, destinationCoords);
  console.log(testETA);
}

testGetETA();

let coordList = [[40.42232064731223, -86.92894606880911],[40.42230839574591, -86.93048029236563],[40.42185508622322, -86.93046419911154],[40.42165497564223, -86.93055002980002],[40.421638640058326, -86.93106827192031],[40.42163455616172, -86.9316798155757],[40.42162230447043, -86.93219479970656],[40.42165905953759, -86.93275269918166],[40.42295772568639, -86.93285462312423],[40.422859714021534, -86.93343398027145],[40.42301081527855, -86.93342861585342],[40.42214838110523, -86.93329906883585],[40.42174816109293, -86.93332857313501],[40.42297895425589, -86.93235022383338],[40.422970786625186, -86.93180305319434],[40.422987121885605, -86.93108958559638],[40.422987121885605, -86.93052632170325],[40.42376927680685, -86.93248969870216],[40.423413988128814, -86.93115932303077],[40.42422257343023, -86.93249506312019],[40.4242103222103, -86.93053168612128],[40.424269057896566, -86.92892730068542],[40.422921411258976, -86.92893802952148],[40.42305288007654, -86.92740339577149],[40.42423717472992, -86.92745703995179],[40.42424942594496, -86.92576724827241],[40.423051388195205, -86.92577396533919],[40.42185482101585, -86.92742084167433],[40.42121705420101, -86.92651872886726],[40.421012857787716, -86.92613249076912],[40.420890339642234, -86.92567651523659],[40.420073571642504, -86.92794792030645],[40.41983077334718, -86.92777850958743],[40.41940195132696, -86.92772486540713],[40.41909156415949, -86.92756393286624],[40.41991653742324, -86.92837932440676],[40.41992062142412, -86.92911961409487],[40.419549310927415, -86.93049374099698],[40.41899388146437, -86.93047764774289],[40.41990870401878, -86.93048837657895],[40.42013740771366, -86.93053129192319],[40.420117197975976, -86.93148754052241],[40.41972921791774, -86.93150899819453],[40.418418237167664, -86.93210981301387],[40.419692461796195, -86.93208835534175],[40.4197087978527, -86.93268380574305],[40.4184264053511, -86.93271599225123],[40.4201097668284, -86.93374679705899],[40.42207638705793, -86.93380522201824],[40.4224929404979, -86.93392860363292],[40.422880904617095, -86.93393396805095],[40.42251967383969, -86.93529919273193],[40.42289947016533, -86.9352938283139],[40.42312407988649, -86.93529919273193],[40.424192965231626, -86.93656387287395],[40.42353547965275, -86.93652632194774],[40.42368249561954, -86.93364026504771],[40.424233802633225, -86.93378510433452],[40.422447128564066, -86.94459095857452],[40.4259142102223, -86.94268385731333],[40.426261190174024, -86.93391403551816],[40.42528928258373, -86.93389257784604],[40.42083173495579, -86.92460207350162],[40.41968822050856, -86.92464498884586],[40.41893675757415, -86.92588953382877],[40.41893675757415, -86.9256427705994],[40.41892858945267, -86.92639378912357],[40.41892858945267, -86.92617921240237],[40.418887748830336, -86.92718772299197],[40.42087281015205, -86.92324591394865],[40.42181961572984, -86.92571504429652],[40.42194621606082, -86.92523224667384],[40.4169040609778, -86.9238984197535],[40.417075596482434, -86.92433830203194],[40.417132774886795, -86.9245099634089],[40.420175173821725, -86.9195666562137],[40.420951126556915, -86.91960957155794],[40.42192309682944, -86.91954519854158],[40.42047285286697, -86.91809262966129],[40.42045651699601, -86.91601123546573],[40.420055261535374, -86.91545963287354],[40.42045651699601, -86.91511574166412],[40.421398719364795, -86.91603143514072],[40.42208922377311, -86.91600638047181],[40.42211372698337, -86.91503005639039],[40.42244043560056, -86.91599565163575],[40.422375094004046, -86.91497104779206],[40.4228907804625, -86.91375664045385],[40.423045965460894, -86.913783462544],[40.42235210489842, -86.91381564905218],[40.42202947972508, -86.91376736928991],[40.42040841198342, -86.91380492021612],[40.42006431633248, -86.91268616337014],[40.42032977529176, -86.9121926369114],[40.41847788063652, -86.91027224880416],[40.419015013961875, -86.90961649982852],[40.41883123120232, -86.90961649982852],[40.419264140901085, -86.91032996742648],[40.420298799649856, -86.91029817199517],[40.420331471464394, -86.91124767398644],[40.42153039382625, -86.91124070367522],[40.4221021378229, -86.91220629892058],[40.422181687298355, -86.91185084980197],[40.42217760343472, -86.9116416374988],[40.422104093846976, -86.9103434483356],[40.42282766020174, -86.91224340540245],[40.42400826106639, -86.91223804098442],[40.42404501482988, -86.91374007803276],[40.42396742352785, -86.91026929956749],[40.42391916707775, -86.90921716495055],[40.423453617052004, -86.91037587924498],[40.42172150987945, -86.9107711315155],[40.422171295935335, -86.90971069140929],[40.42208553473379, -86.90917424960631],[40.42303706956095, -86.90919570727843],[40.42283696249607, -86.90854661269682],[40.422089618602996, -86.90857343478697],[40.421474760915146, -86.91035442157286],[40.420261829773, -86.90961949630278],[40.420286333648875, -86.90913133426207],[40.42071515003191, -86.90912596984404],[40.42082950060577, -86.90911255879897],[40.419893744531635, -86.90961067076502],[40.419775308357735, -86.90961067076502],[40.419771224348025, -86.90893475409327],[40.41976305632786, -86.90845732088862],[40.41949759513234, -86.90860752459345],[40.419444502767526, -86.90890793200312],[40.419264805221914, -86.90961067076502],[40.41846245941322, -86.90905936322693],[40.41846245941322, -86.909611898284],[40.41842029335497, -86.90789030204522],[40.418465218350285, -86.90823362479912],[40.41803230351067, -86.90811560760247],[40.41793836879091, -86.90813170085656],[40.41773824655924, -86.90820143829094],[40.4178886377548, -86.90684672011719],[40.42064658999054, -86.90660598570066],[40.420258612985386, -86.90831723505217],[40.42142061358306, -86.90777542883116],[40.42202094563168, -86.90755012327391],[40.42124092131585, -86.90630021387297],[40.42257515991504, -86.90556274758454],[40.42257515991504, -86.90532671319123],[40.42272217798064, -86.9057344089615],[40.4232775766621, -86.9069253097641],[40.423866992445575, -86.90804882769687],[40.423895578767834, -86.90691157107456],[40.42439194381911, -86.90798445468052],[40.424404195005955, -86.90691693549259],[40.42480439921594, -86.90691693549259],[40.42574337579459, -86.90803062399235],[40.42572295755513, -86.90697383364048],[40.42569437200948, -86.90564882238712],[40.42482454888267, -86.90561663587894],[40.423877307359405, -86.90561188111704],[40.424652502505836, -86.91034135159013],[40.42451773982529, -86.91034135159013],[40.42578659510115, -86.91032525833604],[40.42578251145637, -86.90917190845964],[40.42578659510115, -86.90855500038622],[40.42484735027435, -86.90796808362292],[40.426807600883166, -86.91037332215133],[40.42698319470827, -86.91037332215133],[40.4269423589759, -86.9097564140779],[40.426223646028035, -86.90851723351302],[40.426721845592695, -86.90905903973403],[40.42669326047156, -86.90812563099685],[40.42668917688183, -86.90876936116042],[40.42711795244919, -86.9080988089067],[40.427600333321934, -86.91038439390043],[40.42769017102153, -86.91004643556455],[40.42793926583371, -86.91032374864476],[40.42680443272542, -86.911971432584],[40.426515827576324, -86.90799236297607],[40.42659586978291, -86.90692907375234],[40.427101338604004, -86.90692096881048],[40.427566863382886, -86.90816551379339],[40.42755461277208, -86.90696388415472],[40.42737874557252, -86.90560837212976],[40.42706431164296, -86.90562982980188],[40.42653344582854, -86.90564055863794],[40.42772494764257, -86.90568119566399],[40.42881223909109, -86.90693397814947],[40.42882857293288, -86.90810878569799],[40.4284202256979, -86.90812487895208],[40.42798329141068, -86.90816779429632],[40.42844881008504, -86.90890808398443],[40.42843162949206, -86.9103630191164],[40.42888897815111, -86.91037911237049],[40.43136371350823, -86.91405768177836],[40.431375963425175, -86.91467458985178],[40.43135554689568, -86.91376800320475],[40.43133513035998, -86.91275412819712],[40.4323489289956, -86.91387277179663],[40.43229584677405, -86.91279988819068],[40.43317373966932, -86.912858896789],[40.43327173630468, -86.91384594970648],[40.43328398587405, -86.91517632537787],[40.43328806906335, -86.91476862960761],[40.43328806906335, -86.91455941730445],[40.432319915382074, -86.91498398357658],[40.43134815700685, -86.91659759008473],[40.43138936101313, -86.91920479844292],[40.43136048413596, -86.91860022530433],[40.43137273405351, -86.9179833172309],[40.43136048413596, -86.91727521405097],[40.43018039828473, -86.91914426945561],[40.43020489854751, -86.91853272580022],[40.43022123205107, -86.917953368653],[40.43022123205107, -86.91728818081731],[40.430213065299796, -86.91664445065373],[40.42926571542094, -86.9191764559638],[40.429233047945715, -86.91850053929204],[40.429233047945715, -86.91793191098088],[40.42924121481602, -86.91735255383367],[40.42929021601694, -86.91664445065373],[40.42827935182104, -86.91905901717013],[40.42829568579228, -86.91852257536715],[40.42827118483395, -86.91794321821993],[40.42830385277639, -86.91727803038424],[40.42827118483395, -86.91664502905672],[40.42726769053062, -86.91911060012161],[40.42723093852807, -86.91791433490097],[40.42721711628474, -86.91663681407971],[40.42622292955927, -86.9166913270197],[40.42620659508464, -86.91788759224035],[40.426239264029896, -86.91912677280523],[40.42619269900204, -86.91725995533086],[40.42516361889176, -86.91725459091283],[40.42516361889176, -86.91661086074926],[40.42518812098213, -86.91787149898626],[40.42519628834358, -86.91909995071508],[40.42416327701909, -86.91913919210424],[40.42423678435657, -86.91790537595739],[40.42423678435657, -86.91726164579381],[40.42373892200064, -86.91539525985718],[40.424179611989906, -86.91664060940094],[40.42526811914536, -86.92203194172231],[40.42427169479018, -86.92167789013234],[40.42427169479018, -86.92268640072194],[40.42347127765017, -86.92171007664052],[40.42733610667212, -86.92202753004932],[40.42736749704322, -86.92578262267017],[40.425295104274305, -86.92574918435176],[40.42928358343278, -86.92164596476557],[40.42934075146102, -86.92356642642024],[40.42885890513001, -86.92365225710871],[40.43150118213712, -86.92575704228624],[40.43144401594535, -86.92352544438585],[40.43143584934258, -86.921572796223],[40.4310601845422, -86.92349325787767],[40.43112551770171, -86.92579995763047],[40.43296249287515, -86.92152653989706],[40.432902275322405, -86.91915035247803],[40.432897161500335, -86.9198421126357],[40.43398067686882, -86.92301010905118],[40.43322120721646, -86.92328905878873],[40.43336700911131, -86.92718519349121],[40.43157855057019, -86.9273120136867],[40.43228828927627, -86.93352913375736],[40.4338235737051, -86.93451618667484],[40.436175430807396, -86.93618988510013],[40.438579356840535, -86.93770481474131],[40.43871000848487, -86.94339109785288],[40.43871000848487, -86.94291902906626],[40.43861666494692, -86.94102396727348],[40.43861666494692, -86.94047679663444],[40.438453350125044, -86.94645429665297],[40.43637105137138, -86.94279576355666],[40.43781099692354, -86.92894378446931],[40.43916996879434, -86.92612183371092],[40.43878525246066, -86.92437535853185],[40.438824334643876, -86.9197658042979],[40.438889660259754, -86.91726598549602],[40.43869368322167, -86.91873583603618],[40.43603482065155, -86.91802773285625],[40.43580617100963, -86.91944393921611],[40.435583993777485, -86.91528743127523],[40.43471838165774, -86.91525524476705],[40.434138578628726, -86.91520160058676],[40.4331528677803, -86.91922393115408],[40.432862960141215, -86.91676702769644],[40.43571638849314, -86.92045853250391],[40.432297280315545, -86.91160564402917],[40.43133362656773, -86.91158418635705],[40.43223194829441, -86.91043620089867],[40.43128462685569, -86.9104040143905],[40.431817398342304, -86.9104189634821],[40.43279737803546, -86.9104726076624],[40.430976237715775, -86.91039750580998],[40.42985732810887, -86.91037604813786],[40.43004924751702, -86.9104189634821],[40.43084733770979, -86.91158680473217],[40.43034916870467, -86.91158680473217],[40.42976183751488, -86.90811756883951],[40.430815347311146, -86.90816048418375],[40.43080038169591, -86.90688258387607],[40.430718714841746, -86.90565949656528],[40.42975503847311, -86.9056809542374],[40.430677881377484, -86.90435057856601],[40.430718714841746, -86.90505868174594],[40.42881172670472, -86.90562771091216],[40.42875455822675, -86.90504835376494],[40.428746391297366, -86.90436170825713],[40.427692849090285, -86.90502689609282],[40.427692849090285, -86.90456555614226],[40.427692849090285, -86.90440462360137],[40.42869385002494, -86.90305944055277],[40.42763213993011, -86.90314527124124],[40.42644318205117, -86.90361734002786],[40.426288004890374, -86.90375681489664],[40.430728734971616, -86.90223104576748],[40.43067973481883, -86.90314299683254],[40.43165439817792, -86.90291769127529],[40.430901471383606, -86.90278887748718],[40.431221568217595, -86.9056750021426],[40.431678897903716, -86.9057286463229],[40.4321117249205, -86.90577156166714],[40.43268337897503, -86.90572328190487],[40.43266704606949, -86.90368480305355],[40.432123974701184, -86.90324492077511],[40.431286901220325, -86.9026494703738],[40.430728192284946, -86.90133732512979],[40.43261866024163, -86.9013587828019],[40.43346695745214, -86.901374876056],[40.4335731200044, -86.90138292268304],[40.433528205098895, -86.90420460656671],[40.43314153045521, -86.90395836755383],[40.43311703126229, -86.90573935433972],[40.43352534997844, -86.9057715408479],[40.43394591566391, -86.90579836293804],[40.43507328881972, -86.90582529345741],[40.43519169805771, -86.90709993303696],[40.43401576258488, -86.90704628885666],[40.43518761498402, -86.90826401174942],[40.43403617830671, -86.9082586473314],[40.43277297358753, -86.90827778085534],[40.431743994161394, -86.90820804342096],[40.43414277176805, -86.9105481460193],[40.43419993566557, -86.909775669823],[40.4339965673948, -86.90892577171326],[40.43418768626306, -86.91003852630647],[40.433240392376014, -86.91167678023413],[40.433228142798704, -86.91052343035773],[40.43415167208001, -86.91285878879661],[40.43416392148908, -86.91388875705833],[40.43474951212569, -86.91363014515025],[40.43482709098909, -86.91347457702739],[40.433755643912036, -86.91387800374538],[40.43374747758999, -86.91527811685116],[40.43373522810507, -86.91468534865886],[40.435690933098314, -86.9139611344311],[40.43561743827949, -86.91354270982478],[40.43639321287149, -86.91340323495601],[40.436866839274465, -86.91279169130061],[40.436809677644256, -86.91061373758052],[40.43548678062538, -86.91056009340022],[40.43514491495708, -86.9087504332295],[40.4360971605809, -86.90756810253062],[40.43674227442352, -86.90802944248118],[40.43677493825093, -86.90966022556223],[40.43668511268741, -86.90740716998972],[40.43672155210683, -86.9060338789741],[40.438387182953505, -86.90677416866221],[40.43796256214208, -86.90858734195628],[40.43803605439751, -86.9106794649879],[40.43806055179814, -86.91161287372508],[40.43690916431969, -86.91179526393809],[40.43917459024812, -86.91061552956006],[40.437786413136905, -86.91275056793592],[40.43739445205759, -86.91309389068982],[40.437312793211774, -86.91279348328015],[40.43725563196068, -86.9146831975007],[40.43721480246589, -86.91477975702523],[40.43732912498888, -86.91437206125497],[40.43755776945166, -86.9146295533204],[40.43679834020255, -86.91557369089364],[40.439064810963956, -86.91231890401802],[40.44055094770506, -86.91272659978829],[40.44069792647661, -86.91070957860909],[40.440159002743236, -86.91067739210091],[40.4399466982681, -86.90869255742989],[40.43889598240068, -86.90753839374071],[40.44091041119696, -86.90967705041193],[40.44170245543056, -86.91063191682123],[40.44192291969097, -86.91110398560785],[40.44139217117253, -86.9129493454101],[40.44176777824977, -86.91548821998052],[40.440102026531854, -86.9154131181281],[40.44175813479828, -86.91685109541984],[40.440329183430435, -86.91824584410759],[40.44179847504499, -86.91891266633368],[40.44007556523415, -86.91968514252997],[40.43432350157429, -86.90134318464344],[40.435295278610816, -86.90138609998768],[40.43518911877755, -86.90138609998768],[40.43523811564449, -86.90246971242969],[40.43612821917804, -86.90430434339588],[40.435987258941054, -86.90230035482608],[40.43668953561914, -86.90204822717868],[40.43667903637318, -86.9032742966264],[40.43663412354236, -86.90473341833051],[40.43662187458328, -86.90515184293683],[40.436624354316855, -86.90602087865766],[40.43592207695796, -86.90588676820691],[40.44221722234598, -86.9002327729105],[40.44310723348261, -86.90020058640232],[40.44336035376369, -86.89952466973057],[40.437425859874665, -86.89931813338744],[40.436976735205164, -86.8993288622235],[40.436917219817374, -86.89880851367461],[40.436895538666924, -86.89813792705536],[40.43437412062314, -86.89798912931816],[40.432064040146386, -86.89910492826836],[40.4281469532631, -86.90081927388009],[40.44318821159876, -86.91280355664837],[40.4428616037695, -86.91383352491009],[40.44253499435332, -86.91591491910565],[40.44320454194855, -86.91733112546551],[40.442992247091624, -86.91806068631756],[40.44260031636352, -86.91941251966107],[40.444641597195485, -86.91870441648113],[40.44462526719481, -86.91711654874432],[40.444559947152406, -86.91570034238445],[40.444429306877176, -86.91353311750042],[40.444429306877176, -86.91467037412274],[40.442763621111276, -86.91243877622234],[40.4429269254623, -86.91190233441937],[40.442992247091624, -86.91035738202679],[40.44587849424012, -86.9215264897138],[40.444457795482876, -86.92036777541936],[40.445927483316865, -86.92277103469671],[40.44605812068023, -86.92392974899114],[40.444065873299834, -86.92337184951604],[40.44249816171592, -86.92360788390936],[40.44344532516982, -86.92279249236883],[40.44400055271381, -86.92174106643499],[40.44223687289724, -86.92079692886175],[40.44225320347815, -86.9220843891889],[40.44089775176098, -86.9220843891889],[40.440930413569504, -86.92386537597478],[40.43985415603807, -86.92105442092718],[40.44597832414417, -86.94425484007704],[40.44470459750822, -86.94436212843763],[40.44483835221684, -86.94375383152438],[40.44292772080753, -86.94254147304964],[40.44271542507635, -86.94295989765597],[40.44282157302574, -86.94270240559054],[40.44485468216573, -86.94168316616488],[40.445238434823096, -86.9417582680173],[40.445009816482546, -86.94277750744295],[40.44587529610013, -86.94189774288607],[40.445883460949126, -86.94152223362399],[40.44442634654472, -86.9381406892714],[40.44387928761028, -86.93811923159929],[40.44388745270174, -86.93757206096025],[40.44296479109124, -86.93751841677995],[40.44278515638449, -86.93809777392717],[40.44332405906462, -86.93967491282793],[40.44275249547714, -86.93957835330339],[40.44275249547714, -86.93980365886064],[40.44466313186704, -86.93677812709184],[40.44594999486444, -86.9366815675673],[40.44465177270179, -86.93601637973161],[40.44478241254464, -86.93484693660112],[40.44399856967888, -86.93504005565019],[40.44287177954526, -86.93517953051897],[40.44596533454731, -86.93482221238142]];

var eList = [[244,25,40],[243,244,92],[242,243,54],[238,242,39],[244,238,99],[239,238,24],[25,239,42],[232,238,40],[233,232,23],[239,233,29],[237,233,30],[225,237,39],[232,227,18],[226,225,56],[227,226,83],[234,226,55],[233,234,54],[237,234,17]];

/*var eList = [[0,1,28],[0,27,31],[0,28,49],[2,6,61],[2,7,69],[3,4,5],[3,5,15],[3,6,22],[3,7,31],[3,12,40],[4,5,8],[4,6,15],[4,7,24],[4,12,33],[5,6,6],[5,7,15],[5,12,24],[6,7,7],[6,12,16],[7,12,8],[8,10,14],[8,13,15],[8,14,24],[8,15,39],[8,16,66],[8,52,54],[9,10,2],[9,13,20],[9,14,30],[9,15,44],[9,50,8],[9,52,30],[9,53,39],[10,13,17],[10,14,27],[10,15,41],[10,52,33],[11,48,8],[13,15,30],[13,16,58],[13,50,39],[13,52,61],[13,53,70],[14,15,22],[14,16,49],[14,50,48],[15,50,59],[19,20,38],[20,21,16],[22,23,22],[23,26,21],[27,28,18],[27,29,26],[27,30,32],[28,29,7],[28,30,13],[29,30,6],[31,37,60],[31,40,53],[32,37,60],[33,37,74],[33,39,71],[33,40,67],[34,37,75],[35,36,17],[35,39,66],[35,40,62],[36,39,49],[36,40,45],[36,41,87],[40,41,19],[41,47,46],[42,45,14],[43,46,5],[44,45,14],[48,49,8],[49,51,21],[50,52,21],[50,53,30],[54,57,44],[55,56,56],[62,70,19],[66,68,3],[70,71,8],[72,73,2],[72,74,4],[73,74,1],[66,68,3],[70,71,8],[72,73,2],[72,74,4],[73,74,1],[81,92,57],[83,84,21],[83,90,53],[84,90,32],[87,105,34],[91,92,13],[92,93,7],[92,94,29],[92,98,52],[92,99,37],[93,98,26],[93,99,12],[93,118,50],[93,122,57],[94,129,11],[94,130,6],[94,131,20],[94,132,18],[98,99,10],[98,118,15],[98,119,24],[98,138,43],[99,118,36],[99,119,45],[99,138,64],[100,111,11],[100,117,22],[101,104,39],[102,104,40],[102,113,61],[104,113,18],[104,116,28],[104,140,48],[106,107,17],[106,108,33],[107,236,16],[107,237,31],[108,109,34],[108,146,56],[109,145,88],[109,146,53],[111,117,10],[112,113,78],[112,116,88],[112,140,107],[113,116,9],[113,140,28],[113,141,50],[114,115,40],[111,117,10],[112,113,78],[112,116,88],[112,140,107],[113,116,9],[113,140,28],[113,141,50],[114,115,40],[116,140,18],[116,141,40],[118,119,13],[118,138,32],[119,138,11],[122,124,14],[122,125,27],[123,124,13],[123,125,24],[124,125,8],[126,127,11],[129,130,5],[129,131,9],[129,132,7],[130,131,14],[130,132,11],[131,132,3],[133,134,2],[133,136,19],[134,136,22],[137,139,34],[140,141,22],[142,145,31],[142,146,66],[144,145,28],[144,146,62],[145,146,35],[147,155,40],[150,154,41],[150,161,35],[151,152,18],[151,153,40],[151,158,42],[151,159,20],[151,160,8],[152,153,22],[152,159,42],[152,160,30],[153,160,50],[154,161,55],[158,159,22],[158,160,35],[159,160,12],[162,163,2],[162,173,36],[163,164,7],[163,173,39],[164,173,76],[166,167,7],[166,168,2],[166,175,22],[167,175,15],[167,181,25],[168,175,20],[169,176,16],[171,172,5],[174,181,51],[175,181,20],[176,180,18],[179,180,6],[179,186,34],[181,311,19],[182,305,6],[182,306,20],[182,307,21],[182,309,38],[183,184,17],[183,302,29],[183,303,38],[183,304,64],[184,302,52],[185,187,14],[190,192,5],[190,193,23],[190,202,41],[190,285,42],[191,192,25],[191,193,43],[191,202,29],[191,206,38],[192,193,18],[192,201,38],[192,202,56],[192,285,36],[193,201,69],[193,285,15],[193,287,34],[193,290,37],[194,195,26],[194,284,55],[195,284,21],[195,286,42],[196,197,27],[196,199,52],[196,200,45],[196,343,67],[196,344,81],[197,198,40],[197,199,17],[197,200,10],[197,343,36],[198,199,6],[198,200,18],[200,343,56],[202,203,34],[202,204,25],[202,205,17],[202,206,9],[203,204,8],[203,205,19],[203,206,32],[203,250,29],[204,205,9],[204,206,22],[204,250,38],[205,206,12],[207,210,55],[207,211,74],[208,210,36],[208,211,55],[210,211,16],[217,218,8],[217,219,36],[217,220,63],[217,221,88],[218,219,10],[218,220,37],[218,221,62],[219,220,10],[219,221,36],[220,221,10],[225,227,71],[225,228,14],[226,227,47],[226,228,37],[227,228,41],[229,230,31],[229,231,8],[229,232,27],[230,231,41],[230,232,60],[231,232,16],[232,238,40],[233,234,54],[233,237,32],[233,239,28],[236,237,15],[239,240,10],[245,246,32],[248,259,19],[249,250,27],[249,252,56],[251,252,56],[253,254,44],[253,257,20],[263,267,43],[264,266,49],[264,267,52],[265,266,27],[265,267,30],[273,274,30],[273,275,10],[274,275,12],[276,277,27],[278,352,17],[278,353,32],[279,347,25],[280,345,24],[280,346,24],[284,286,18],[285,287,18],[288,338,27],[289,337,37],[290,296,22],[291,295,40],[292,295,57],[295,299,49],[296,297,11],[296,298,27],[297,298,16],[297,300,30],[297,301,23],[298,300,23],[298,313,45],[298,315,33],[300,312,51],[300,315,40],[301,312,56],[301,313,56],[301,315,45],[302,303,9],[302,304,35],[302,308,62],[303,304,27],[303,308,53],[304,308,27],[305,306,7],[305,307,9],[305,309,25],[306,309,26],[307,309,14],[312,313,29],[312,315,6],[312,323,10],[313,315,14],[313,323,35],[314,317,36],[314,318,55],[315,323,21],[318,321,55],[319,320,22],[319,321,52],[320,324,37],[324,328,56],[324,414,33],[325,326,1],[325,327,50],[326,327,41],[328,329,13],[328,329,13],[331,334,45],[332,333,20],[332,335,29],[332,358,34],[333,335,9],[333,340,28],[333,358,13],[334,336,32],[334,341,39],[335,339,26],[335,340,18],[335,342,21],[335,358,4],[336,341,16],[339,340,8],[339,342,5],[339,345,22],[339,358,23],[340,342,3],[342,345,27],[343,344,14],[345,346,25],[349,350,16],[349,351,11],[350,351,6],[354,355,9],[354,356,58],[354,368,37],[355,356,39],[355,368,18],[356,360,43],[356,361,24],[356,368,18],[357,358,30],[359,405,30],[360,361,15],[360,362,5],[360,363,22],[360,403,58],[360,404,48],[360,405,33],[361,362,23],[361,368,42],[362,363,16],[362,402,63],[362,403,53],[362,404,43],[363,401,33],[363,402,21],[363,403,11],[364,365,17],[364,382,16],[364,383,6],[365,366,59],[366,367,27],[366,370,50],[367,375,53],[370,373,39],[370,374,43],[370,375,30],[370,377,59],[371,372,5],[371,373,22],[371,374,27],[371,375,14],[371,376,18],[371,377,43],[372,373,35],[372,374,39],[372,375,26],[372,376,31],[372,377,55],[373,375,3],[373,376,3],[373,377,17],[374,377,16],[375,376,4],[375,377,24],[376,377,24],[379,380,22],[379,389,34],[381,382,27],[382,383,10],[382,384,9],[382,385,18],[383,384,19],[384,385,9],[384,386,13],[385,386,4],[385,387,27],[385,416,19],[385,427,15],[386,387,23],[386,416,15],[386,427,11],[387,388,35],[388,390,28],[389,391,47],[390,392,39],[391,393,13],[391,442,30],[393,440,31],[393,442,15],[395,397,16],[396,397,24],[398,399,42],[400,401,18],[400,402,32],[401,402,12],[401,403,17],[401,404,27],[402,403,5],[402,404,15],[403,404,10],[407,408,38],[410,411,5],[410,412,15],[411,412,8],[416,427,4],[416,429,55],[418,419,27],[419,420,7],[419,421,28],[420,421,21],[422,423,23],[423,424,13],[423,426,25],[424,425,28],[424,426,11],[425,426,12],[427,429,35],[428,429,20],[430,432,21],[430,433,27],[431,437,60],[434,436,11],[435,438,54],[435,439,25],[436,437,28],[440,441,37],[444,445,7],[444,450,42],[444,451,33],[445,450,35],[445,451,26],[446,447,9],[450,451,19],[452,453,4],[455,456,10],[457,460,44],[457,461,48],[458,460,36],[458,461,40],[460,461,2],[462,464,16],[462,465,32],[463,468,10],];*/

function cloneArray (array) {
    var clone = [];
    if  (array.length > 0) {
        array.forEach(item => {
            clone.push(item);
        });
    }
    return(clone);
}

function frequency (element, array) {
    var counter = 0;
    array.forEach(item => {
        if (item == element){
            counter++;
        }
    });
    return(counter);
}

class User {
    static id = 0;
    constructor (name) {
        this.id = User.id;
        this.name = name;
        this.location;
        this.route;
        User.id++;
    }
}

class Node { //locations like intersections on map
    static id = 0;
    constructor (location) {
        this.id = Node.id;
        this.location = location;
        this.edges = [];
        Node.id++;
    }
    addEdge (edge) {
        this.edges.push(edge);
    }
    distFrom (location){
        return Math.sqrt((this.location[0] - location[0]) ** 2 + (this.location[1] - location[1]) ** 2);
    }
}

class Edge { //connection between nodes
    static id = 0;
    constructor (node1, node2, dist) {
        this.id = Edge.id;
        this.nodes = [node1, node2];
        node1.addEdge(this);
        node2.addEdge(this);
        this.dist = dist;
        //this.dist = node1.distFrom(node2.location);
        Edge.id++;
    }
    traverseFrom(node){
        return node == this.nodes[0] ? [this.nodes[1], this.dist] : [this.nodes[0], this.dist];
    }
}

class Ride {
  static id = 0;
  constructor (location, destination, detours) {
    this.route;
    this.location = location;
    this.destination = destination;
    this.detours = detours;
    this.updateLoc();
  }
  updateLoc () {
    this.route = new Route(this.location, this.destination, this.detours);
  }
  reachDest (node) {
    this.location = node;
    for (var i = 0; i < this.detours.length; i++){
      if (this.detours[i][0] == node) {
        this.detours[i].splice(0,1);
        this.updateLoc();
      } else if (this.destination == node)
        var a = 0; //kill the ride
    }
  }
  testPassenger (origin, dest) {
    this.updateLoc();
    var testDetours = cloneArray(this.detours);
    testDetours.push([origin, dest]);
    var testRoute = new Route(this.location, this.destination, testDetours);
    var distDiff = testRoute.bestDist - this.route.bestDist;
    return(distDiff);
  }
  addPassenger (origin,dest) { //assumes that passenger is tested first
    this.detours.push([origin, dest]);
    this.updateLoc();
  }
  showRoute () {
    var i = 0;
    this.route.route.forEach(edge => {
      calculateAndDisplayRoute(edge.nodes[0].location[0],edge.nodes[0].location[1],edge.nodes[1].location[0],edge.nodes[1].location[1],i)
      i++;
    });
    //calculateAndDisplayRoute(this.location.location[0],this.location.location[1],this.destination.location[0],this.destination.location[1],0)
  }
}

class Route { //collection of edges
    static id = 0;
    constructor (origin, destination, detours) { //takes nodes
        this.id = Route.id;
        this.bestDist = 99999;
        this.origin = origin;
        this.destination = destination;
        this.detours = detours;
        this.passNo = detours.length + 1; //number of passengers
        this.route = this.getRoute();
        Route.id++;
    }
    getRoute () {
        this.routes = [];
        this.pathFind(this.origin, [this.origin], [], 0);
        this.bestDist = Infinity;
        this.routes.forEach(route => {
          if (route[0] < this.bestDist) {
            console.log(this.bestDist);
            this.bestDist = route[0];
            this.route = route[1];
          }
        })
        return(this.route);
    }
    pathFind (node, nPath, path, dist) {
        node.edges.forEach(edge => {
            var edgeInfo = edge.traverseFrom(node);

            var newPath = cloneArray(path);
            var newNPath = cloneArray(nPath);

            newPath.push(edge);
            newNPath.push(edgeInfo[0]);

            if (edgeInfo[0] == this.destination) {
                var valid = true;
                //console.log(this.detours)
                this.detours.forEach(detour => {
                  if (detour.length == 1) {
                    if(!(newNPath.includes(detour[0])))
                      valid = false;
                    } else if (detour.length == 2) {  
                      //console.log(newNPath.includes(detour[1], 0))
                      if (!(newNPath.includes(detour[0]) && newNPath.includes(detour[1], newNPath.indexOf(detour[0])))) {
                          valid = false;
                      }
                    }
                });
                if (valid && dist < this.bestDist) {
                    //console.log(this.bestDist);
                    //console.log(this.bestDist);
                    this.bestDist = dist + edgeInfo[1];
                    //this.route = newPath;
                    this.routes.push([dist + edgeInfo[1],newPath])
                    //return;
                } else {
                  if (dist + edgeInfo[1] < this.bestDist);
                    this.pathFind(edgeInfo[0], newNPath, newPath, dist + edgeInfo[1]);
                }
            //} else if (path.includes(edge)) {
            } else if (frequency(edgeInfo[0], newNPath) > this.passNo + 1 || path.length > 10) { //this might not be optimal
                //return ([Infinity,path]);
                //this.paths.push([Infinity,path]);
                return;
            } else {
                if (dist + edgeInfo[1] < this.bestDist);
                    this.pathFind(edgeInfo[0], newNPath, newPath, dist + edgeInfo[1]);
            }
        });
    }
}

let nodes = [];

coordList.forEach(coord => {
  nodes.push(new Node(coord));
});

let edgeList = [];

eList.forEach(eInfo => {
  edgeList.push(new Edge(nodes[eInfo[0]], nodes[eInfo[1]], eInfo[2]));
});

async function timeDist(node1, node2) {
  return await getETA({lat: node1.location[0], lng: node1.location[1]}, {lat: node2.location[0], lng: node2.location[1]});
}

rides.push(new Ride(nodes[239],nodes[242],[]));
//rides.push(new Ride(nodes[25],nodes[232],[]));


//var a = new Node([0, 0]); //takes in location
//var ab = new Edge(a, b, 10); //takes in node1, 
//var route = new Route(a, d, [[b,c],[c,b]]); <- takes in driver origin and dest nodes for the first two args, and the last arg is an array of passenger origin and dest nodes
//var ride = new Ride(a, d, [[b,c],[c,b]]); <- like the route object declaration;

/*var closenessThreshold = 0.003;
var tolerance = 0.15;

async function timeDist(node1, node2) {
  return await getETA({lat: node1.location[0], lng: node1.location[1]}, {lat: node2.location[0], lng: node2.location[1]});
}

async function assignConnections() {
  for (var i = 462; i < nodes.length; i++) {
      console.log(i);
      console.log(saveString);
      for (var j = i; j < nodes.length; j++) {
          var posDist = nodes[i].distFrom(nodes[j].location);
          if (posDist < closenessThreshold) { //checking that they're at least somewhat close
              var eta = await timeDist(nodes[i], nodes[j]);
              if (Math.abs(eta.distance - posDist * 84611.4482011) / eta.distance < tolerance) {
                saveString += "[" + i + "," + j + "," + eta.duration + "],";
                //edgeList.push(new Edge(nodes[i], nodes[j], eta.duration));
              }
          }
      }
  }
}

assignConnections();*/

